local ft = require("improved-ft")
local h = require("tests.helpers")

require("tests.custom-asserts").register()

describe("user-repeat", function()
  before_each(h.get_preset([[
    a = a word a word and other words
    b = | words
    c = a word a word and other words
  ]], { 2, 4 }))

  it("forward should work after different hops", function()
    h.hop_with_character(ft.hop_backward_to_char, "w")
    assert.cursor_at(1, 28)
    h.perform_through_keymap(ft.repeat_forward, true)
    assert.cursor_at(2, 6)

    h.hop_with_character(ft.hop_forward_to_char, "a")
    assert.cursor_at(3, 4)
    h.perform_through_keymap(ft.repeat_forward, true)
    assert.cursor_at(3, 11)
  end)

  it("backward should work after different hops", function()
    h.hop_with_character(ft.hop_forward_to_char, "w")
    assert.cursor_at(2, 6)
    h.perform_through_keymap(ft.repeat_backward, true)
    assert.cursor_at(1, 28)

    h.hop_with_character(ft.hop_backward_to_char, "a")
    assert.cursor_at(1, 18)
    h.perform_through_keymap(ft.repeat_backward, true)
    assert.cursor_at(1, 11)
  end)

  describe("should work in insert mode", function()
    it("forward after forward hop", function()
      h.hop_with_character(ft.hop_forward_to_char, "w")
      assert.cursor_at(2, 6)
      h.feedkeys("i", false)
      h.perform_through_keymap(ft.repeat_forward, true)
      assert.cursor_at(3, 5)
    end)

    it("forward after backward hop", function()
      h.hop_with_character(ft.hop_backward_to_char, "w")
      assert.cursor_at(1, 28)
      h.feedkeys("i", false)
      h.perform_through_keymap(ft.repeat_forward, true)
      assert.cursor_at(2, 5)
    end)

    it("backward after forward hop", function()
      h.hop_with_character(ft.hop_forward_to_char, "w")
      assert.cursor_at(2, 6)
      h.feedkeys("i", false)
      h.perform_through_keymap(ft.repeat_backward, true)
      assert.cursor_at(1, 28)
    end)

    it("backward after backward hop", function()
      h.hop_with_character(ft.hop_backward_to_char, "w")
      assert.cursor_at(1, 28)
      h.feedkeys("i", false)
      h.perform_through_keymap(ft.repeat_backward, true)
      assert.cursor_at(1, 13)
    end)

    describe("use_relative_repetition == true", function()
      before_each(function()
        h.get_preset("a a a a a a a", { 1, 6 })()
        ft.setup({ use_relative_repetition = true })
      end)

      after_each(function()
        ft.setup({ use_relative_repetition = false })
      end)

      it("forward after forward hop", function()
        h.hop_with_character(ft.hop_forward_to_char, "a")
        assert.cursor_at(1, 8)
        h.feedkeys("i", false)
        h.perform_through_keymap(ft.repeat_forward, true)
        assert.cursor_at(1, 9)
      end)

      it("forward after backward hop", function()
        h.hop_with_character(ft.hop_backward_to_char, "a")
        assert.cursor_at(1, 4)
        h.feedkeys("i", false)
        h.perform_through_keymap(ft.repeat_forward, true)
        assert.cursor_at(1, 2)
      end)

      it("backward after forward hop", function()
        h.hop_with_character(ft.hop_forward_to_char, "a")
        assert.cursor_at(1, 8)
        h.feedkeys("i", false)
        h.perform_through_keymap(ft.repeat_backward, true)
        assert.cursor_at(1, 6)
      end)

      it("backward after backward hop", function()
        h.hop_with_character(ft.hop_backward_to_char, "a")
        assert.cursor_at(1, 4)
        h.feedkeys("i", false)
        h.perform_through_keymap(ft.repeat_backward, true)
        assert.cursor_at(1, 5)
      end)
    end)
  end)

  it("shouldn't respect previous v:count", function()
    vim.api.nvim_feedkeys("2", "n", false)
    h.hop_with_character(ft.hop_forward_to_char, "w")
    assert.cursor_at(3, 6)

    h.perform_through_keymap(ft.repeat_forward, true)
    assert.cursor_at(3, 13)
  end)

  it("should respect current v:count", function()
    vim.api.nvim_feedkeys("3", "n", false)
    h.hop_with_character(ft.hop_forward_to_char, "w")
    assert.cursor_at(3, 13)

    vim.api.nvim_feedkeys("2", "n", false)
    h.perform_through_keymap(ft.repeat_backward, true)
    assert.cursor_at(2, 6)
  end)

  it("should do nothing if it's called before anything", function()
    ft._reset_state()
    h.perform_through_keymap(ft.repeat_forward, true)
    assert.cursor_at(2, 4)
  end)
end)
