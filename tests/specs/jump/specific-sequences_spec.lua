local h = require("tests.helpers")

require("tests.custom-asserts").register()

describe("specific-sequences-jump", function()
  describe("repeating-char", function()
    before_each(h.get_preset("aaaaaaaaa", { 1, 4 }))

    it("forward", function()
      h.jump("forward", "none", "a")
      assert.cursor_at(1, 5)
      h.jump("forward", "none", "a")
      assert.cursor_at(1, 6)
    end)

    it("pre-forward", function()
      h.jump("forward", "pre", "a")
      assert.cursor_at(1, 5)
      h.jump("forward", "pre", "a")
      assert.cursor_at(1, 6)
    end)

    it("post-forward", function()
      h.jump("forward", "post", "a")
      assert.cursor_at(1, 5)
      h.jump("forward", "post", "a")
      assert.cursor_at(1, 6)
    end)

    it("backward", function()
      h.jump("backward", "none", "a")
      assert.cursor_at(1, 3)
      h.jump("backward", "none", "a")
      assert.cursor_at(1, 2)
    end)

    it("pre-backward", function()
      h.jump("backward", "pre", "a")
      assert.cursor_at(1, 3)
      h.jump("backward", "pre", "a")
      assert.cursor_at(1, 2)
    end)

    it("post-backward", function()
      h.jump("backward", "post", "a")
      assert.cursor_at(1, 3)
      h.jump("backward", "post", "a")
      assert.cursor_at(1, 2)
    end)
  end)

  describe("alternating-repeating-char", function()
    before_each(h.get_preset("a a a a a a a", { 1, 6 }))

    it("forward", function()
      h.jump("forward", "none", "a")
      assert.cursor_at(1, 8)
      h.jump("forward", "none", "a")
      assert.cursor_at(1, 10)
    end)

    it("pre-forward", function()
      h.jump("forward", "pre", "a")
      assert.cursor_at(1, 7)
      h.jump("forward", "pre", "a")
      assert.cursor_at(1, 9)
    end)

    it("post-forward", function()
      h.jump("forward", "post", "a")
      assert.cursor_at(1, 7)
      h.jump("forward", "post", "a")
      assert.cursor_at(1, 9)
    end)

    it("backward", function()
      h.jump("backward", "none", "a")
      assert.cursor_at(1, 4)
      h.jump("backward", "none", "a")
      assert.cursor_at(1, 2)
    end)

    it("pre-backward", function()
      h.jump("backward", "pre", "a")
      assert.cursor_at(1, 5)
      h.jump("backward", "pre", "a")
      assert.cursor_at(1, 3)
    end)

    it("post-backward", function()
      h.jump("backward", "post", "a")
      assert.cursor_at(1, 5)
      h.jump("backward", "post", "a")
      assert.cursor_at(1, 3)
    end)
  end)
end)
