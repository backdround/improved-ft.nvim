local ft = require("improved-ft")
local h = require("tests.helpers")

require("tests.custom-asserts").register()

describe("v:count", function()
  before_each(h.get_preset("a a a a a a", { 1, 0 }))

  describe("for simple hop", function()
    it("should be respected", function()
      h.feedkeys("3", false)
      h.hop_with_character(ft.hop_forward_to_char, "a")
      assert.cursor_at(1, 6)
    end)

    it("shouldn't save for consequences hops", function()
      h.feedkeys("2", false)
      h.hop_with_character(ft.hop_forward_to_char, "a")
      h.hop_with_character(ft.hop_forward_to_char, "a")
      assert.cursor_at(1, 6)
    end)

    it("should hop to a last chracter if count is too big", function()
      h.feedkeys("22", false)
      h.hop_with_character(ft.hop_forward_to_char, "a")
      assert.cursor_at(1, 10)
    end)
  end)

  describe("for user-repeat", function()
    it("should be respected", function()
      h.hop_with_character(ft.hop_forward_to_char, "a")
      h.feedkeys("3", false)
      h.perform_through_keymap(ft.repeat_forward, true)
      assert.cursor_at(1, 8)
    end)

    it("should be one by default", function()
      h.feedkeys("3", false)
      h.hop_with_character(ft.hop_forward_to_char, "a")
      h.perform_through_keymap(ft.repeat_forward, true)
      assert.cursor_at(1, 8)
    end)
  end)

  describe("for dot-repeat", function()
    it("should be respected if count set", function()
      h.feedkeys("2d", false)
      h.hop_with_character(ft.hop_forward_to_post_char, "a")
      assert.buffer("a a a a")

      h.feedkeys("1.", true)
      assert.buffer("a a a")
    end)

    it("should be repeated if count isn't set", function()
      h.feedkeys("2d", false)
      h.hop_with_character(ft.hop_forward_to_post_char, "a")
      assert.buffer("a a a a")

      h.feedkeys(".", true)
      assert.buffer("a a")
    end)
  end)
end)
