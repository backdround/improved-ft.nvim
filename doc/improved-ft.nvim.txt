*improved-ft.nvim.txt*            For NVIM v0.8.0            Last change: 2023

==============================================================================
Table of Contents                         *improved-ft.nvim-table-of-contents*

1. Improved-ft.nvim                        |improved-ft.nvim-improved-ft.nvim|
2. Basic configuration                  |improved-ft.nvim-basic-configuration|
3. Advanced configuration            |improved-ft.nvim-advanced-configuration|

==============================================================================
1. Improved-ft.nvim                        *improved-ft.nvim-improved-ft.nvim*






It’s a feature-rich, but straight-forward Neovim plugin that improves default
`f/t` hop abilities.

Additional features: - Works in multiline; - Works in `insert` mode; - Has the
additional `post` offset; - Has the ability of stable next / previous hops
(don’t depend on last hop direction).


==============================================================================
2. Basic configuration                  *improved-ft.nvim-basic-configuration*

>lua
    local ft = require("improved-ft")
    ft.setup({
      -- Maps default f/F/t/T/;/, keys
      -- default: false
      use_default_mappings = true,
    
      -- Ignores case of the given characters.
      -- default: false
      ignore_char_case = true,
    
      -- Takes a last jump direction into account during repetition jumps.
      -- default: false
      use_relative_repetition = true,
    })
<


==============================================================================
3. Advanced configuration            *improved-ft.nvim-advanced-configuration*

Basic mappings ~

>lua
    local map = function(key, fn, description)
      vim.keymap.set({ "n", "x", "o" }, key, fn, {
        desc = description,
      })
    end
    
    map("f", ft.hop_forward_to_char, "Hop forward to a given char")
    map("F", ft.hop_backward_to_char, "Hop backward to a given char")
    
    map("t", ft.hop_forward_to_pre_char, "Hop forward before a given char")
    map("T", ft.hop_backward_to_pre_char, "Hop backward before a given char")
    
    map(";", ft.repeat_forward, "Repeat hop forward to a last given char")
    map(",", ft.repeat_backward, "Repeat hop backward to a last given char")
<

Post character mappings ~

>lua
    local map = function(key, fn, description)
      vim.keymap.set({ "n", "x", "o" }, key, fn, {
        desc = description,
      })
    end
    
    map("s", ft.hop_forward_to_post_char, "Hop forward after a given char")
    map("S", ft.hop_backward_to_post_char, "Hop backward after a given char")
<

Insert mode mappings ~

>lua
    local imap = function(key, fn, description)
      vim.keymap.set("i", key, fn, {
        desc = description,
      })
    end
    
    imap("<M-f>", ft.hop_forward_to_char, "Hop forward to a given char")
    imap("<M-F>", ft.hop_backward_to_char, "Hop forward to a given char")
    
    imap("<M-t>", ft.hop_forward_to_pre_char, "Hop forward before a given char")
    imap("<M-T>", ft.hop_backward_to_pre_char, "Hop forward before a given char")
    
    imap("<M-;>", ft.repeat_forward, "Repeat hop forward to a last given char")
    imap("<M-,>", ft.repeat_backward, "Repeat hop backward to a last given char")
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
